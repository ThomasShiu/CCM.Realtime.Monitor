<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
/*******************************************************************************
 * Copyright © 2016 CCM.Framework 版權所有
 * Author: CCM.MIS
 * Description: CCM快速開發平臺
 * Website：http://www.ccm3s.com/
*********************************************************************************/
using System;
using System.Linq;
using System.Collections.Generic;
using CCM.Code;
using CCM.Domain;
using CCM.Repository;
//todo: 請修改對應的namespace
namespace CCM.Application 
{        
		<#
			//Param vpara = new Param();
			//修改connection string
			string connectionString = "Server=192.168.100.11;Initial Catalog=EIP;User ID=sa;Password=6937937"; 
			SqlConnection conn = new SqlConnection(connectionString); 
			conn.Open(); 
			
			//如果需要database中全部table，則使用conn.GetSchema("Tables")即可
			string[] restrictions = new string[4];
			restrictions[1] = "dbo";
			//修改table名稱
			restrictions[2] = "RD_DWG_EXMANAGE_MT"; 
			DataTable schema = conn.GetSchema("Tables", restrictions);
			
			string selectQuery = "select * from  @tableName"; 
			SqlCommand command = new SqlCommand(selectQuery,conn); 
			SqlDataAdapter ad = new SqlDataAdapter(command); 
			System.Data.DataSet ds = new DataSet(); 
			
			foreach(System.Data.DataRow row in schema.Rows) 
			{ 				
			#>   
public class <#= row["TABLE_NAME"].ToString() #>App
    {
        private I<#= row["TABLE_NAME"].ToString() #>Repository service = new <#= row["TABLE_NAME"].ToString() #>Repository();     

	public List<<#= row["TABLE_NAME"].ToString() #>Entity> GetList(string keyword = "")
        {
            var expression = ExtLinq.True<<#= row["TABLE_NAME"].ToString() #>Entity>();
            if (!string.IsNullOrEmpty(keyword))
            {
                expression = expression.And(t => t.F_FullName.Contains(keyword));
                expression = expression.Or(t => t.F_EnCode.Contains(keyword));
            }
            //expression = expression.And(t => t.F_Category == 1);
            return service.IQueryable(expression).OrderBy(t => t.CreatorTime).ToList();
        }     
	 public List<<#= row["TABLE_NAME"].ToString() #>Entity> GetList(Pagination pagination, string  keyword = "")
        {
            var expression = ExtLinq.True<<#= row["TABLE_NAME"].ToString() #>Entity>();
            if (!string.IsNullOrEmpty(keyword))
            {
                expression = expression.And(t => t.OFFICIAL_NM.Contains(keyword));
                expression = expression.Or(t => t.SUBJECT.Contains(keyword));
            }
            //expression = expression.And(t => t.F_Category == 2);
            //return service.IQueryable(expression).OrderBy(t => t.ISSUEID).ToList();
            return service.FindList(expression, pagination);
        }
        public <#= row["TABLE_NAME"].ToString() #>Entity GetForm(string keyValue)
        {
            return service.FindEntity(keyValue);
        }
        public void DeleteForm(string keyValue)
        {
            if (service.IQueryable().Count(t => t.SID.Equals(keyValue)) > 0)
            {
                throw new Exception("刪除失敗！操作的物件包含了下級資料。");
            }
            else
            {
                service.Delete(t => t.SID == keyValue);
            }
        }
        public void SubmitForm(<#= row["TABLE_NAME"].ToString() #>Entity tableEntity, string keyValue)
        {
            if (!string.IsNullOrEmpty(keyValue))
            {
                tableEntity.Modify(keyValue);
                service.Update(tableEntity);
            }
            else
            {
                tableEntity.Create();
                service.Insert(tableEntity);
            }
        }
			 <#
			 }
			 #>
		                               
}
}